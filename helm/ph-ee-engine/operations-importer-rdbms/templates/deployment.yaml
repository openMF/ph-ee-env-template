{{- if .Values.enabled -}}

apiVersion: apps/v1
kind: Deployment
metadata:
  name: ph-ee-importer-rdbms
  labels:
    app: ph-ee-importer-rdbms
spec:
  replicas: {{ .Values.replicas }}
  selector:
    matchLabels:
      app: ph-ee-importer-rdbms
  template:
    metadata:
      labels:
        app: ph-ee-importer-rdbms
      annotations:
{{- if .Values.deployment.annotations }}
{{ toYaml .Values.deployment.annotations | indent 8 }}
{{- end }}
    spec:
      initContainers:
      #During this Pod's initialization, check that kafka service is up and running before starting this pod
      - name: check-kafka-ready
        image: busybox:latest
        command: ['sh', '-c','until nc -vz kafka 9092; do echo "Waiting for myconfig service"; sleep 2; done;']
      containers:
        - name: ph-ee-importer-rdbms
          image: "{{ .Values.image }}"
          imagePullPolicy: "{{ .Values.global.imagePullPolicy }}"
          ports:
            - containerPort: 8000
          livenessProbe:
            httpGet:
              path: /actuator/health/liveness
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 30
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8000
            initialDelaySeconds: 20
            periodSeconds: 30
          env:
          - name: "SPRING_PROFILES_ACTIVE"
            value: "{{ .Values.global.SPRING_PROFILES_ACTIVE }}"
          - name: "DATASOURCE_CORE_USERNAME"
            value: "{{ .Values.datasource.username }}" 
          - name: "DATASOURCE_CORE_PASSWORD"
            valueFrom:
              secretKeyRef:
                name: "importer-rdbms-secret"
                key: "database-password"
          - name: "DATASOURCE_CORE_HOST"
            value: "{{ .Values.datasource.host }}"
          - name: "DATASOURCE_CORE_PORT"
            value: "{{ .Values.datasource.port }}"
          - name: "DATASOURCE_CORE_SCHEMA"
            value: "{{ .Values.datasource.schema }}"
          - name: "LOGGING_LEVEL_ROOT"
            value: "{{ .Values.global.LOGGING_LEVEL_ROOT }}"
          - name: "LOGGING_PATTERN_CONSOLE"
            value: "{{ .Values.global.LOGGING_PATTERN_CONSOLE }}"
          - name: "JAVA_TOOL_OPTIONS"
            value: "{{ .Values.javaToolOptions}}"
          - name: "AWS_ACCESS_KEY"
            valueFrom:
              secretKeyRef:
                name: "bulk-processor-secret"
                key: "aws-access-key"
          - name: "AWS_SECRET_KEY"
            valueFrom:
              secretKeyRef:
                name: "bulk-processor-secret"
                key: "aws-secret-key"
{{- if .Values.extraEnvs | default .Values.deployment.extraEnvs }}
{{ toYaml ( .Values.extraEnvs | default .Values.deployment.extraEnvs ) | indent 10 }}
{{- end }}        
          envFrom: {{ toYaml ( .Values.envFrom | default .Values.deployment.envFrom ) | nindent 12 }}
          securityContext: {{ toYaml ( .Values.podSecurityContext | default .Values.deployment.securityContext ) | nindent 12 }}              

          volumeMounts:
            - name: ph-ee-config
              mountPath: "/config"
          resources:
            limits:
              memory: "{{ .Values.limits.memory }}"
              cpu: "{{ .Values.limits.cpu }}"
            requests:
              memory: "{{ .Values.requests.memory }}"
              cpu: "{{ .Values.requests.cpu }}"
      volumes:
        - name: ph-ee-config
          configMap:
            name: ph-ee-config
{{- end }}